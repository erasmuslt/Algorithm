#include <iostream>
#include <math.h>
#include <algorithm>
#include <queue>

using namespace std;

int Map1[30][30];


// N : 지도 크기 , M : Command 갯수
// 지도
// 7 5
// 9 9 9 9 9 9 9 
// 9           9
// 9   1       9
// 9 3         9
// 9       3   9
// 9   3       9
// 9 9 9 9 9 9 9 
// 9 : 벽 // 1 : 지네 머리 // 3 : 거미
// 거미를 먹으면 생체 energy 3증가(1초마다 감소, 0보다 클때)
// 
// 2 1 (2 = right , 1 : 1s간 지속)
// 1 2
// 0 1 
// 2 1 
// 2 4 

int curdir = 2;
int comdir;

int Comm[1001];
int Mtime[1001];

int a, b;
int Energy = 0;
int length = 0;


void Caldir(int comdir);

void Move(int);

struct coord
{
	int x;
	int y;
};
queue<coord> Tail;

int cnt = 0;
bool gameover = false;

int main()
{

	if (freopen("input.txt", "r", stdin) == NULL)
	{
		printf("file open erreor");
	}

	coord temp;

	int N, M;
	cin >> N >> M;

	// Map 저장
	for (int y = N - 1; y >= 0; y--)
	{
		for (int x = 0; x < N; x++)
		{
			cin >> Map1[y][x];
			if (Map1[y][x] == 1)
			{
				b = y;
				a = x;


			}
		}
	}

	// Command and Time저장
	for (int i = 0; i < M; i++)
	{
		cin >> Comm[i] >> Mtime[i];
	}


	// 명령 실행
	for (int k = 0; k < M; k++)
	{
		Caldir(Comm[k]);
		Move(Mtime[k]);
		if (gameover == true) break;
	}



	cout << cnt << endl;
	return 0;
}

void Caldir(int comdir)
{
	if (comdir != 0)
	{
		if (curdir == 3)
		{
			curdir = comdir;
		}
		else if (curdir == 0)
		{
			curdir = -1 * comdir + 3; // 좌, 우 변경(down일때) 즉, 1 -> 2 , 2->1로
		}
		else if (curdir == comdir)
		{
			curdir = 0;
		}
		else
		{
			curdir = 3;
		}
	}

}

void Move(int t)
{

	for (int i = 0; i < t; i++)
	{


		if (curdir == 0) b--;
		else if (curdir == 1) a--;
		else if (curdir == 2) a++;
		else if (curdir == 3) b++;

		cnt++;

		if (Map1[b][a] == 9) // 벽
		{
			gameover = true;
			return;
		}
		else
		{
			if (Energy > 0)
			{
				if (Map1[b][a] == -9)
				{
					gameover = true;
					return;
				}
				else if (Map1[b][a] == 3)
				{
					Energy += 3;
				}
				coord co = Tail.back();
				Map1[co.y][co.x] = -9;
				// 꼬리 증가
				co.x = a;
				co.y = b;
				Tail.push(co);
				Energy--;
				length++;

			}
			else if (Energy <= 0)
			{

				// A()
				if (length != 0) length--;
				int t = 1;

				while (Tail.size() != length)
				{

					coord co = Tail.front();
					Map1[co.y][co.x] = 0;
					Tail.pop();
					if (Map1[b][a] == -9)
					{
						gameover = true;
						return;
					}

					if (t == 1 && length != 0)
					{
						coord co = Tail.back();
						Map1[co.y][co.x] = -9;
						t--;
					}
				}


				if (length != 0)
				{
					coord co;
					co.x = a;
					co.y = b;
					Tail.push(co);
				}
				if (Map1[b][a] == 3)
				{
					Energy += 3;
					coord co;
					co.x = a;
					co.y = b;
					Tail.push(co);
				}

			}
		}



		Map1[b][a] = 1;
		if (curdir == 0 && Map1[b + 1][a] == 1) Map1[b + 1][a] = 0;
		else if (curdir == 1 && Map1[b][a + 1] == 1) Map1[b][a + 1] = 0;
		else if (curdir == 2 && Map1[b][a - 1] == 1) Map1[b][a - 1] = 0;
		else if (curdir == 3 && Map1[b - 1][a] == 1) Map1[b - 1][a] = 0;


	}
}
